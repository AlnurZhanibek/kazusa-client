/**
 * Generated by orval v6.31.0 🍺
 * Do not edit manually.
 * Swagger KazUSA API
 * This is the KazUSA server.
 * OpenAPI spec version: 1.0
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import type {
  InternalHandlerLoginResponse,
  InternalHandlerRegisterResponse,
  KazusaServerInternalEntityCourse,
  KazusaServerInternalEntityModule
} from '.././models'

export const getCourseReadResponseMock = (): KazusaServerInternalEntityCourse[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: faker.helpers.arrayElement([faker.word.sample(), undefined]), description: faker.helpers.arrayElement([faker.word.sample(), undefined]), id: faker.helpers.arrayElement([faker.word.sample(), undefined]), price: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), title: faker.helpers.arrayElement([faker.word.sample(), undefined]), updatedAt: faker.helpers.arrayElement([faker.word.sample(), undefined])})))

export const getModuleCreateResponseMock = (): boolean => (faker.datatype.boolean())

export const getLoginResponseMock = (overrideResponse: Partial< InternalHandlerLoginResponse > = {}): InternalHandlerLoginResponse => ({error: faker.helpers.arrayElement([faker.word.sample(), undefined]), ok: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), ...overrideResponse})

export const getModuleReadResponseMock = (): KazusaServerInternalEntityModule[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({content: faker.helpers.arrayElement([faker.word.sample(), undefined]), courseId: faker.helpers.arrayElement([faker.word.sample(), undefined]), createdAt: faker.helpers.arrayElement([faker.word.sample(), undefined]), durationMinutes: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.word.sample(), undefined]), name: faker.helpers.arrayElement([faker.word.sample(), undefined]), updatedAt: faker.helpers.arrayElement([faker.word.sample(), undefined])})))

export const getRegisterResponseMock = (overrideResponse: Partial< InternalHandlerRegisterResponse > = {}): InternalHandlerRegisterResponse => ({error: faker.helpers.arrayElement([faker.word.sample(), undefined]), ok: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), ...overrideResponse})


export const getCourseReadMockHandler = (overrideResponse?: KazusaServerInternalEntityCourse[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<KazusaServerInternalEntityCourse[]> | KazusaServerInternalEntityCourse[])) => {
  return http.get('*/course', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCourseReadResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getModuleCreateMockHandler = (overrideResponse?: boolean | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<boolean> | boolean)) => {
  return http.post('*/course', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getModuleCreateResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getLoginMockHandler = (overrideResponse?: InternalHandlerLoginResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<InternalHandlerLoginResponse> | InternalHandlerLoginResponse)) => {
  return http.post('*/login', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getLoginResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getModuleReadMockHandler = (overrideResponse?: KazusaServerInternalEntityModule[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<KazusaServerInternalEntityModule[]> | KazusaServerInternalEntityModule[])) => {
  return http.get('*/module', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getModuleReadResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getRegisterMockHandler = (overrideResponse?: InternalHandlerRegisterResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<InternalHandlerRegisterResponse> | InternalHandlerRegisterResponse)) => {
  return http.post('*/register', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getRegisterResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}
export const getDefaultMock = () => [
  getCourseReadMockHandler(),
  getModuleCreateMockHandler(),
  getLoginMockHandler(),
  getModuleReadMockHandler(),
  getRegisterMockHandler()
]
