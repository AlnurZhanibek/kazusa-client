/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * Swagger KazUSA API
 * This is the KazUSA server.
 * OpenAPI spec version: 1.0
 */
import useSwr from 'swr'
import type {
  Key,
  SWRConfiguration
} from 'swr'
import useSWRMutation from 'swr/mutation'
import type {
  SWRMutationConfiguration
} from 'swr/mutation'
import type {
  InternalHandlerLoginRequest,
  InternalHandlerLoginResponse,
  InternalHandlerRegisterRequest,
  InternalHandlerRegisterResponse,
  KazusaServerInternalEntityCourse,
  KazusaServerInternalEntityCourseReadRequest,
  KazusaServerInternalEntityModule,
  KazusaServerInternalEntityModuleReadRequest,
  KazusaServerInternalEntityNewModule
} from '.././models'
import { apiClient } from '.././common/api/client';


  
  type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * read courses
 * @summary Read courses
 */
export const courseRead = (
    kazusaServerInternalEntityCourseReadRequest: KazusaServerInternalEntityCourseReadRequest,
 options?: SecondParameter<typeof apiClient>) => {
      return apiClient<KazusaServerInternalEntityCourse[]>(
      {url: `/course`, method: 'GET',
      headers: {'Content-Type': 'application/json', }
    },
      options);
    }
  


export const getCourseReadKey = (kazusaServerInternalEntityCourseReadRequest: KazusaServerInternalEntityCourseReadRequest,) => [`/course`, kazusaServerInternalEntityCourseReadRequest] as const;


export type CourseReadQueryResult = NonNullable<Awaited<ReturnType<typeof courseRead>>>
export type CourseReadQueryError = boolean

/**
 * @summary Read courses
 */
export const useCourseRead = <TError = boolean>(
  kazusaServerInternalEntityCourseReadRequest: KazusaServerInternalEntityCourseReadRequest, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof courseRead>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof apiClient> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getCourseReadKey(kazusaServerInternalEntityCourseReadRequest) : null);
  const swrFn = () => courseRead(kazusaServerInternalEntityCourseReadRequest, requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * create module
 * @summary Create module
 */
export const moduleCreate = (
    kazusaServerInternalEntityNewModule: KazusaServerInternalEntityNewModule,
 options?: SecondParameter<typeof apiClient>) => {
      return apiClient<boolean>(
      {url: `/course`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: kazusaServerInternalEntityNewModule
    },
      options);
    }
  


export const getModuleCreateMutationFetcher = ( options?: SecondParameter<typeof apiClient>) => {
  return (_: string, { arg }: { arg: KazusaServerInternalEntityNewModule }): Promise<boolean> => {
    return moduleCreate(arg, options);
  }
}
export const getModuleCreateMutationKey = () => `/course` as const;

export type ModuleCreateMutationResult = NonNullable<Awaited<ReturnType<typeof moduleCreate>>>
export type ModuleCreateMutationError = boolean

/**
 * @summary Create module
 */
export const useModuleCreate = <TError = boolean>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof moduleCreate>>, TError, string, KazusaServerInternalEntityNewModule, Awaited<ReturnType<typeof moduleCreate>>> & { swrKey?: string }, request?: SecondParameter<typeof apiClient> }
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getModuleCreateMutationKey();
  const swrFn = getModuleCreateMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * login user
 * @summary Login a user
 */
export const login = (
    internalHandlerLoginRequest: InternalHandlerLoginRequest,
 options?: SecondParameter<typeof apiClient>) => {
      return apiClient<InternalHandlerLoginResponse>(
      {url: `/login`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: internalHandlerLoginRequest
    },
      options);
    }
  


export const getLoginMutationFetcher = ( options?: SecondParameter<typeof apiClient>) => {
  return (_: string, { arg }: { arg: InternalHandlerLoginRequest }): Promise<InternalHandlerLoginResponse> => {
    return login(arg, options);
  }
}
export const getLoginMutationKey = () => `/login` as const;

export type LoginMutationResult = NonNullable<Awaited<ReturnType<typeof login>>>
export type LoginMutationError = InternalHandlerLoginResponse

/**
 * @summary Login a user
 */
export const useLogin = <TError = InternalHandlerLoginResponse>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof login>>, TError, string, InternalHandlerLoginRequest, Awaited<ReturnType<typeof login>>> & { swrKey?: string }, request?: SecondParameter<typeof apiClient> }
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getLoginMutationKey();
  const swrFn = getLoginMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * read modules
 * @summary Read modules
 */
export const moduleRead = (
    kazusaServerInternalEntityModuleReadRequest: KazusaServerInternalEntityModuleReadRequest,
 options?: SecondParameter<typeof apiClient>) => {
      return apiClient<KazusaServerInternalEntityModule[]>(
      {url: `/module`, method: 'GET',
      headers: {'Content-Type': 'application/json', }
    },
      options);
    }
  


export const getModuleReadKey = (kazusaServerInternalEntityModuleReadRequest: KazusaServerInternalEntityModuleReadRequest,) => [`/module`, kazusaServerInternalEntityModuleReadRequest] as const;


export type ModuleReadQueryResult = NonNullable<Awaited<ReturnType<typeof moduleRead>>>
export type ModuleReadQueryError = boolean

/**
 * @summary Read modules
 */
export const useModuleRead = <TError = boolean>(
  kazusaServerInternalEntityModuleReadRequest: KazusaServerInternalEntityModuleReadRequest, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof moduleRead>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof apiClient> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getModuleReadKey(kazusaServerInternalEntityModuleReadRequest) : null);
  const swrFn = () => moduleRead(kazusaServerInternalEntityModuleReadRequest, requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * register user
 * @summary Register a user
 */
export const register = (
    internalHandlerRegisterRequest: InternalHandlerRegisterRequest,
 options?: SecondParameter<typeof apiClient>) => {
      return apiClient<InternalHandlerRegisterResponse>(
      {url: `/register`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: internalHandlerRegisterRequest
    },
      options);
    }
  


export const getRegisterMutationFetcher = ( options?: SecondParameter<typeof apiClient>) => {
  return (_: string, { arg }: { arg: InternalHandlerRegisterRequest }): Promise<InternalHandlerRegisterResponse> => {
    return register(arg, options);
  }
}
export const getRegisterMutationKey = () => `/register` as const;

export type RegisterMutationResult = NonNullable<Awaited<ReturnType<typeof register>>>
export type RegisterMutationError = InternalHandlerRegisterResponse

/**
 * @summary Register a user
 */
export const useRegister = <TError = InternalHandlerRegisterResponse>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof register>>, TError, string, InternalHandlerRegisterRequest, Awaited<ReturnType<typeof register>>> & { swrKey?: string }, request?: SecondParameter<typeof apiClient> }
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getRegisterMutationKey();
  const swrFn = getRegisterMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
